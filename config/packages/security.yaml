security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email   
    firewalls:

        login:
            pattern:  ^/api/login
            stateless: true
            # anonymous: true
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(tvshow|category|character), roles: ROLE_USER } # Pour afficher les page tvshow/list, .. il faut être connecté
        - { path: ^/(tvshow|category|character)/*, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Cette règle ignorée à cause de la première qui match si on est sur /tvshow/list
        - { path: ^/admin/*, roles: ROLE_ADMIN } # Pour afficher l'Admin il faut être admin
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        # ROLE_TVSHOW_EDITOR : ROLE_USER
        # Un admin pourra faire tout ce que peut faire un utilisateur connecté
        # ROLE_ADMIN:       ROLE_TVSHOW_EDITOR 
        ROLE_ADMIN:       ROLE_USER 
        # Un Super admin pourra faire tout ce que peut faire un Admin (il aura donc la possibilité de faire ce que peut faire un utilisateur connecté)
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_TOTO]